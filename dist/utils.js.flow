/**
 * Flowtype definitions for utils
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.14.1
 * @flow
 */

import type {
  CrossDomainWindowType,
  SameDomainWindowType,
  DomainMatcher,
} from "./types";
declare export function isFileProtocol(win?: SameDomainWindowType): boolean;
declare export function isAboutProtocol(win?: SameDomainWindowType): boolean;
declare export function getParent(
  win?: CrossDomainWindowType
): CrossDomainWindowType | null | void;
declare export function getOpener(
  win?: CrossDomainWindowType
): CrossDomainWindowType | null | void;
declare export function canReadFromWindow(
  win: CrossDomainWindowType | SameDomainWindowType
): boolean;
declare export function getActualDomain(win?: SameDomainWindowType): string;
declare export function getDomain(win?: SameDomainWindowType): string;
declare export function isBlankDomain(win: CrossDomainWindowType): boolean;
declare export function isActuallySameDomain(
  win: CrossDomainWindowType
): boolean;
declare export function isSameDomain(
  win: CrossDomainWindowType | SameDomainWindowType
): boolean;
declare export function assertSameDomain(
  win: CrossDomainWindowType | SameDomainWindowType
): SameDomainWindowType;
declare export function getParents(
  win: CrossDomainWindowType
): $ReadOnlyArray<CrossDomainWindowType>;
declare export function isAncestorParent(
  parent: CrossDomainWindowType,
  child: CrossDomainWindowType
): boolean;
declare export function getFrames(
  win: CrossDomainWindowType
): $ReadOnlyArray<CrossDomainWindowType>;
declare export function getAllChildFrames(
  win: CrossDomainWindowType
): $ReadOnlyArray<CrossDomainWindowType>;
declare export function getTop(
  win?: CrossDomainWindowType
): CrossDomainWindowType | null | void;
declare export function getNextOpener(
  win?: CrossDomainWindowType
): CrossDomainWindowType | null | void;
declare export function getUltimateTop(
  win?: CrossDomainWindowType
): CrossDomainWindowType;
declare export function getAllFramesInWindow(
  win: CrossDomainWindowType
): $ReadOnlyArray<CrossDomainWindowType>;
declare export function getAllWindows(
  win?: CrossDomainWindowType
): $ReadOnlyArray<CrossDomainWindowType>;
declare export function isTop(win: CrossDomainWindowType): boolean;
declare export function isFrameWindowClosed(frame: HTMLIFrameElement): boolean;
declare export function isWindowClosed(
  win: CrossDomainWindowType,
  allowMock?: boolean
): boolean;
declare export function linkFrameWindow(frame: HTMLIFrameElement): void;
declare export function getUserAgent(
  win: SameDomainWindowType | null | void
): string;
declare export function getFrameByName(
  win: CrossDomainWindowType,
  name: string
): CrossDomainWindowType | null | void;
declare export function findChildFrameByName(
  win: CrossDomainWindowType,
  name: string
): CrossDomainWindowType | null | void;
declare export function findFrameByName(
  win: CrossDomainWindowType,
  name: string
): CrossDomainWindowType | null | void;
declare export function isParent(
  win: CrossDomainWindowType,
  frame: CrossDomainWindowType
): boolean;
declare export function isOpener(
  parent: CrossDomainWindowType,
  child: CrossDomainWindowType
): boolean;
declare export function getAncestor(
  win?: CrossDomainWindowType
): CrossDomainWindowType | null | void;
declare export function getAncestors(
  win: CrossDomainWindowType
): $ReadOnlyArray<CrossDomainWindowType>;
declare export function isAncestor(
  parent: CrossDomainWindowType,
  child: CrossDomainWindowType
): boolean;
declare export function isPopup(win?: CrossDomainWindowType): boolean;
declare export function isIframe(win?: CrossDomainWindowType): boolean;
declare export function isFullpage(win?: CrossDomainWindowType): boolean;
declare export function getDistanceFromTop(win?: CrossDomainWindowType): number;
declare export function getNthParent(
  win: CrossDomainWindowType,
  n?: number
): CrossDomainWindowType | void | null;
declare export function getNthParentFromTop(
  win: CrossDomainWindowType,
  n?: number
): CrossDomainWindowType | null | void;
declare export function isSameTopWindow(
  win1: CrossDomainWindowType,
  win2: CrossDomainWindowType
): boolean;
declare export function matchDomain(
  pattern: DomainMatcher,
  origin: DomainMatcher
): boolean;
declare export function stringifyDomainPattern(pattern: DomainMatcher): string;
declare export function getDomainFromUrl(url: string): string;
declare export function onCloseWindow(
  win: CrossDomainWindowType,
  callback: (...args: Array<any>) => any,
  delay?: number,
  maxtime?: number
): {
  cancel: () => void,
  ...
};
declare export function isWindow(obj: { [key: string]: any, ... }): boolean;
declare export function isBrowser(): boolean;
declare export function isCurrentDomain(domain: string): boolean;
declare export function isMockDomain(domain: string): boolean;
declare export function normalizeMockUrl(url: string): string;
declare export function closeWindow(win: CrossDomainWindowType): void;
declare export function getFrameForWindow(
  win: CrossDomainWindowType
): HTMLElement | null | void;
